package com.androidgames.moonwasalone;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.androidgames.framework.Input.TouchEvent;
import com.androidgames.framework.math.OverlapTester;
import com.androidgames.framework.math.Vector2;

public class World {
    public interface WorldListener {
        public void jump();
        public void hit();
        public void bound();
        public void playNoteA();
        public void playNoteB();
        public void playNoteC();
        public void playNoteD();
        public void playNoteE();
        public void playNoteF();
        public void playNoteG();
    }

    public static final float WORLD_WIDTH = 20;
    public static final float WORLD_HEIGHT = 15;    
    public static final int WORLD_STATE_RUNNING = 0;
    public static final int WORLD_STATE_NEXT_LEVEL = 1;
    public static final int WORLD_STATE_GAME_OVER = 2;
    public static final Vector2 gravity = new Vector2(0, -24);

    public final Moon moon;           
    public final List<Orbit> orbits;
    public final List<Square> squares;
    public final List<EmptySquare> emptysquares;
    public final List<BoundSquare> boundsquares;
    public final List<Triangle> triangles;
    public final List<LongTriangle> longtriangles;
    public final List<Blackhole> blackholes;
    public final List<Photon> photons;
    public final List<Dialog> dialogs;
    
  
    public final WorldListener listener;
    public final Random rand;
    
    public int level;    
    public int state;

    public World(WorldListener listener, int level) {
        this.moon = new Moon(1, 1);        
        this.orbits = new ArrayList<Orbit>();
        this.squares = new ArrayList<Square>();
        this.emptysquares = new ArrayList<EmptySquare>();
        this.boundsquares = new ArrayList<BoundSquare>();
        this.triangles = new ArrayList<Triangle>();
        this.longtriangles = new ArrayList<LongTriangle>();
        this.blackholes = new ArrayList<Blackhole>();
        this.photons = new ArrayList<Photon>();
        this.dialogs = new ArrayList<Dialog>();
        
        this.listener = listener;
        rand = new Random();
        generateLevel(level);
        
        this.level = level;
        this.state = WORLD_STATE_RUNNING;
    }

    private void generateLevel(int level) {
    	switch (level) {
    	case 1:
    		generateLevel1();
    		break;
    	case 2:
    		generateLevel2();
    		break;
    	case 3:
    		generateLevel3();
    		break;
    	case 4:
    		generateLevel4();
    		break;
    	case 5:
    		generateLevel5();
    		break;
    	case 6:
    		generateLevel6();
    		break;
    	case 7:
    		generateLevel7();
    		break;
    	case 8:
    		generateLevel8();
    		break;
    	case 9:
    		generateLevel9();
    		break;
    	case 10:
    		generateLevel10();
    		break;
    	case 11:
    		generateLevel11();
    		break;
    	case 12:
    		generateLevel12();
    		break;
    	case 13:
    		generateLevel13();
    		break;
    	case 14:
    		generateLevel14();
    		break;
    	case 15:
    		generateLevel15();
    		break;
    	case 16:
    		generateLevel16();
    		break;
    	case 17:
    		generateLevel17();
    		break;
    	default:
    		generateDefault();
    		break;
    	}
    }
    
    private void generateMap(int[][] map, int width, int height) {
    	for (int x = 0; x < width; x++) {
    		for (int y = 0; y < height; y++) {
    			/* moon */
    			if (map[x][y] == 1)
    			{
    		    	moon.position.set(1.0f*x + 0.5f, 1.0f*y + 0.5f);
    			}
    			/* orbit */
    			else if (map[x][y] == 2)
    			{
    		    	Orbit orbit = new Orbit(1.0f*x + 0.5f, 1.0f*y + 0.5f);
    		    	orbits.add(orbit);
    			}
    			/* square */
    			else if (map[x][y] == 3)
    			{
    	    		Square square = new Square(1.0f*x + 0.5f, 1.0f*y + 0.5f);
    	    		squares.add(square);
    			}
    			/* short triangle up */
    			else if (map[x][y] == 4)
    			{
    	    		Triangle triangle = new Triangle(1.0f*x + 0.5f, 1.0f*y + 0.5f, Triangle.TRIANGLE_UP);
    	    		triangles.add(triangle);
    			}
    			/* short triangle down */
    			else if (map[x][y] == 5)
    			{
    	    		Triangle triangle = new Triangle(1.0f*x + 0.5f, 1.0f*y + 0.5f, Triangle.TRIANGLE_DOWN);
    	    		triangles.add(triangle);
    			}
    			/* short triangle left */
    			else if (map[x][y] == 6)
    			{
    	    		Triangle triangle = new Triangle(1.0f*x + 0.5f, 1.0f*y + 0.5f, Triangle.TRIANGLE_LEFT);
    	    		triangles.add(triangle);
    			}
    			/* short triangle right */
    			else if (map[x][y] == 7)
    			{
    	    		Triangle triangle = new Triangle(1.0f*x + 0.5f, 1.0f*y + 0.5f, Triangle.TRIANGLE_RIGHT);
    	    		triangles.add(triangle);
    			}
    			/* long triangle up */
    			else if (map[x][y] == 8)
    			{
    				LongTriangle longtriangle = new LongTriangle(1.0f*x + 0.5f, 1.0f*y + 1.0f, LongTriangle.LONGTRIANGLE_UP);
    	    		longtriangles.add(longtriangle);
    			}
    			/* long triangle down */
    			else if (map[x][y] == 9)
    			{
    				LongTriangle longtriangle = new LongTriangle(1.0f*x + 0.5f, 1.0f*y, LongTriangle.LONGTRIANGLE_DOWN);
    				longtriangles.add(longtriangle);
    			}
    			/* long triangle left */
    			else if (map[x][y] == 10)
    			{
    				LongTriangle longtriangle = new LongTriangle(1.0f*x + 0.5f, 1.0f*y + 1.0f, LongTriangle.LONGTRIANGLE_LEFT);
    				longtriangles.add(longtriangle);
    			}
    			/* long triangle right */
    			else if (map[x][y] == 11)
    			{
    				LongTriangle longtriangle = new LongTriangle(1.0f*x + 0.5f, 1.0f*y + 1.0f, LongTriangle.LONGTRIANGLE_RIGHT);
    				longtriangles.add(longtriangle);
    			}
    			/* bound square */
    			else if (map[x][y] == 12)
    			{
    	    		BoundSquare boundsquare = new BoundSquare(1.0f*x + 0.5f, 1.0f*y + 0.5f);
    	    		boundsquares.add(boundsquare);
    			}
    			/* empty square */
    			else if (map[x][y] == 13)
    			{
    	    		EmptySquare emptysquare = new EmptySquare(2.0f, 1.0f*x + 0.5f, 1.0f*y + 0.5f);
    	    		emptysquares.add(emptysquare);
    			}
    			/* photon */
    			else if (map[x][y] == 14)
    			{
    	    		Photon photon = new Photon(1.0f*x + 0.5f, 1.0f*y + 0.5f);
    	    		photons.add(photon);
    			}
    		}
    	}
    }
    
    private void generateDefault() {
    	
    	moon.setWorldLevel(WORLD_WIDTH, WORLD_HEIGHT);
    	
    	ArrayList<String> phrases = new ArrayList<String>();
    	phrases.add("There will be many challenges ahead,");
    	phrases.add("but Moon won't give up,");
    	phrases.add("and the journey won't end soon.");
    	phrases.add("to be continued!");
    	Dialog dialog = new Dialog(3.0f, 0.5f, 5.5f, phrases);
    	dialogs.add(dialog);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 20, 15);
    }
    
    private void generateLevel16() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	ArrayList<String> phrase1 = new ArrayList<String>();
    	phrase1.add("        It's photon, Moon");
    	phrase1.add("eat it to be able to dash");
    	phrase1.add(" ");
    	Dialog dialog1 = new Dialog(3.0f, 10.5f, 7.5f, phrase1);
    	dialogs.add(dialog1);
    	
    	ArrayList<String> phrase2 = new ArrayList<String>();
    	phrase2.add("jump, drag the screen to dash");
    	Dialog dialog2 = new Dialog(3.0f, 29.5f, 11.5f, phrase2);
    	dialogs.add(dialog2);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0},
    			{0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 3, 8, 0},
    			{0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 3, 8, 0},
    			{0, 0, 0, 0, 9, 3, 14, 0, 0, 0, 0, 0, 3, 8, 0},
    			{0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 3, 8, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5}
    	};
    	
    	generateMap(map, 40, 15);
    	/*orbits.get(0).position.x += 0.5f;*/
    }
    
    private void generateLevel17() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    			{0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4},
    			{0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4},
    			{0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4},
    			{0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 3, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4}
    	};
    	
    	generateMap(map, 40, 15);
    	
    	for (int i = 0; i < emptysquares.size(); i++)
    		emptysquares.get(i).setDuration(0.6f);
    }
    
    private void generateLevel1() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	ArrayList<String> phrases = new ArrayList<String>();
    	phrases.add("Once upon a time,");
    	phrases.add("Moon was alone!");
    	phrases.add("Moon started the journey");
    	phrases.add("through the universe");
    	phrases.add("To find Moon's best friend, Earth.");
    	Dialog dialog = new Dialog(2.0f, 0.5f, 0.5f, phrases);
    	dialogs.add(dialog);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    	
    }
    
    private void generateLevel2() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	ArrayList<String> phrases = new ArrayList<String>();
    	phrases.add("Moon, just jump.");
    	phrases.add("Don't be scared!");
    	Dialog dialog = new Dialog(2.0f, 0.5f, 3.5f, phrases);
    	dialogs.add(dialog);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel3() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	ArrayList<String> phrases = new ArrayList<String>();
    	phrases.add("Moon, be careful!");
    	Dialog dialog = new Dialog(2.0f, 1.5f, 3.5f, phrases);
    	dialogs.add(dialog);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel4() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }

    private void generateLevel5() {
    	
    	moon.setWorldLevel(WORLD_WIDTH, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
				{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 3, 2, 0, 3, 1, 0, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 4, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 4, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 4, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 4, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0}
    	};
    	
    	generateMap(map, 20, 15);
    	orbits.get(0).position.y += 0.5f;
    }
    
    private void generateLevel6() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 4, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 4, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 5, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 5, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 5, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 5, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 2, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    	orbits.get(0).position.x -= 0.5f;
    }
    
    private void generateLevel7() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0},
    			{0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0},
    			{0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0},
    			{0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0},
    			{0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }

    private void generateLevel8() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 3, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0},
    			{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 9, 3, 4, 0, 0, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 9, 3, 4, 0, 0, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 9, 3, 4, 0, 0, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0},
				{0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 2, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 4, 0, 0, 0},
				{0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 4, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 60, 15);
    }
    
    private void generateLevel9() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{3, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    			{3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel10() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{3, 3, 1, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{3, 3, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{5, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{12, 12, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 4},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel11() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 3, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 9, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 9, 3, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 60, 15);
    }

    private void generateLevel12() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel13() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 12, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 2, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 12, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevel14() {
    	
    	moon.setWorldLevel(WORLD_WIDTH, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 0, 0, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 0, 0, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 1, 0, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 0, 0, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 0, 0, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 9, 3, 12, 12, 12, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 12, 12, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 0, 0, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 0, 0, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 0, 2, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 0, 0, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0},
    			{0, 0, 12, 0, 0, 3, 8, 0, 0, 12, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 20, 15);
    }
    
    private void generateLevel15() {
    	
    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	int[][] map = new int[][]
    	{
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 3, 8, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 5, 3, 4, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 5, 3, 4, 0, 12, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    	};
    	
    	generateMap(map, 40, 15);
    }
    
    private void generateLevelTest() {

    	moon.setWorldLevel(WORLD_WIDTH * 2, WORLD_HEIGHT);
    	
    	Orbit orbit = new Orbit(35, 5);
    	orbits.add(orbit);
    	
    	Blackhole blackhole1 = new Blackhole(10, 10);
    	blackholes.add(blackhole1);
    	
    	Blackhole blackhole2 = new Blackhole(32, 10);
    	blackholes.add(blackhole2);
    	
    	Blackhole blackhole3 = new Blackhole(27, 1);
    	blackholes.add(blackhole3);
    }
    
    public void update(float deltaTime, List<TouchEvent> touchEvents, float accelX) {
        updateMoon(deltaTime, touchEvents, accelX);
        updateBlackholes(deltaTime);
        updateEmptySquares(deltaTime);
        updatePhotons(deltaTime);
        updateOrbit(deltaTime);
        updateDialogs(deltaTime);
        if (moon.state != moon.MOON_STATE_HIT)
            checkCollisions();
        checkGameOver();
    }

    private void updateMoon(float deltaTime, List<TouchEvent> touchEvents, float accelX) {

        int len = touchEvents.size();
        for(int i = 0; i < len; i++) {
            TouchEvent event = touchEvents.get(i);
            
            if (event.type == TouchEvent.TOUCH_DRAGGED) {
            	if (moon.state == Moon.MOON_STATE_JUMP) {
            		moon.dash();
            	}
            	break;
            }
            else if(event.type == TouchEvent.TOUCH_UP) {
            	if (moon.state == Moon.MOON_STATE_STAND) {
            		moon.jump();
            		listener.jump();
            	}
            	break;
            }
        }
    	if ((moon.state != Moon.MOON_STATE_HIT) && (moon.state != Moon.MOON_STATE_DASH)){
    			moon.velocity.x = accelX / 10 * Moon.MOON_MOVE_VELOCITY;
    	}
        moon.update(deltaTime);
    }

    private void updateDialogs(float deltaTime)
    {
        int len = dialogs.size();
        for (int i = 0; i < len; i++) {
            Dialog dialog = dialogs.get(i);
            dialog.update(deltaTime);
        }
    }
    
    private void updateBlackholes(float deltaTime)
    {
        int len = blackholes.size();
        for (int i = 0; i < len; i++) {
            Blackhole blackhole = blackholes.get(i);
            blackhole.update(deltaTime);
        }
    }
    
    private void updateOrbit(float deltaTime)
    {
        int len = orbits.size();
        for (int i = 0; i < len; i++) {
        	Orbit orbit = orbits.get(i);
        	orbit.update(deltaTime);
        }
    }
    
    private void updateEmptySquares(float deltaTime)
    {
        int len = emptysquares.size();
        for (int i = 0; i < len; i++) {
        	EmptySquare emptysquare = emptysquares.get(i);
        	emptysquare.update(deltaTime);
        }
    }
    
    private void updatePhotons(float deltaTime)
    {
        int len = photons.size();
        for (int i = 0; i < len; i++) {
        	Photon photon = photons.get(i);
        	photon.update(deltaTime);
        }
    }
    
    private void checkCollisions() {
    	checkSquareCollisions();
    	checkEmptySquareCollisions();
    	checkBoundSquareCollisions();
    	checkTriangleCollisions();
    	checkLongTriangleCollisions();
    	checkBlackholeCollisions();
    	checkPhotonCollisions();
    	checkOrbitCollision();
    }
    
    private void checkSquareCollisions() {
        int len = squares.size();
        for (int i = 0; i < len; i++) {
            Square square = squares.get(i);
            
            if (square.internalEdge != true)
            {
		        if (OverlapTester.overlapRectangles(moon.bounds, square.bounds)) {
		        	
		        	if ((moon.velocity.y <= 0) && (moon.position.y > square.position.y))
		        	{   
		        		moon.position.y = square.position.y + Square.SQUARE_HEIGHT;
		        		moon.stand();
		        	}
		        	else if ((moon.velocity.y > 0) && (moon.position.y < square.position.y))
		        	{	
		            	moon.position.y = square.position.y - Square.SQUARE_HEIGHT;
		            	moon.velocity.y = 0;
		        	}
		        	else if ((moon.velocity.x > 0) && (moon.position.x < square.position.x))
		        	{
		            	moon.position.x = square.position.x - Square.SQUARE_WIDTH;
		            	moon.velocity.x = 0;
		    	        
		            	if (i - 1 >= 0) {
			    	        Square squareEdge1 = squares.get(i - 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, squareEdge1.bounds)) {
			    	        	squareEdge1.internalEdge = true;
			    	        }
		            	}
		    	        
		            	if (i + 1 < len) {
			    	        Square squareEdge2 = squares.get(i + 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, squareEdge2.bounds)) {
			    	        	squareEdge2.internalEdge = true;
			    	        }
		            	}
		        	}
		        	else if ((moon.velocity.x < 0) && (moon.position.x > square.position.x))
		        	{
		            	moon.position.x = square.position.x + Square.SQUARE_WIDTH;
		            	moon.velocity.x = 0;
		            	
		            	if (i - 1 >= 0) {
			            	Square squareEdge1 = squares.get(i - 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, squareEdge1.bounds)) {
			    	        	squareEdge1.internalEdge = true;
			    	        }
		            	}
		    	        
		            	if (i + 1 < len) {
			    	        Square squareEdge2 = squares.get(i + 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, squareEdge2.bounds)) {
			    	        	squareEdge2.internalEdge = true;
			    	        }
		            	}
		    	        
		        	}
		        }
            }
	        else
	        {
	        	square.internalEdge = false;
	        }
        }
    }
    
    private void checkEmptySquareCollisions() {
        int len = emptysquares.size();
        for (int i = 0; i < len; i++) {
            EmptySquare emptysquare = emptysquares.get(i);
            
            if (emptysquare.state == EmptySquare.EMPTYSQUARE_EMPTY_STATE)
            	break;
            
            if (emptysquare.internalEdge != true)
            {   
		        if (OverlapTester.overlapRectangles(moon.bounds, emptysquare.bounds)) {
		        	
		        	if ((moon.velocity.y <= 0) && (moon.position.y > emptysquare.position.y))
		        	{   
		        		moon.position.y = emptysquare.position.y + EmptySquare.EMPTYSQUARE_HEIGHT;
		        		moon.stand();
		        	}
		        	else if ((moon.velocity.y > 0) && (moon.position.y < emptysquare.position.y))
		        	{	
		            	moon.position.y = emptysquare.position.y - EmptySquare.EMPTYSQUARE_HEIGHT;
		            	moon.velocity.y = 0;
		        	}
		        	else if ((moon.velocity.x > 0) && (moon.position.x < emptysquare.position.x))
		        	{
		            	moon.position.x = emptysquare.position.x - EmptySquare.EMPTYSQUARE_WIDTH;
		            	moon.velocity.x = 0;
		    	        
		            	if (i - 1 >= 0) {
			    	        EmptySquare emptysquareEdge1 = emptysquares.get(i - 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, emptysquareEdge1.bounds)) {
			    	        	emptysquareEdge1.internalEdge = true;
			    	        }
		            	}
		    	        
		            	if (i + 1 < len) {
			    	        EmptySquare emptysquareEdge2 = emptysquares.get(i + 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, emptysquareEdge2.bounds)) {
			    	        	emptysquareEdge2.internalEdge = true;
			    	        }
		            	}
		        	}
		        	else if ((moon.velocity.x < 0) && (moon.position.x > emptysquare.position.x))
		        	{
		            	moon.position.x = emptysquare.position.x + EmptySquare.EMPTYSQUARE_WIDTH;
		            	moon.velocity.x = 0;
		            	
		            	if (i - 1 >= 0) {
			            	EmptySquare emptysquareEdge1 = emptysquares.get(i - 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, emptysquareEdge1.bounds)) {
			    	        	emptysquareEdge1.internalEdge = true;
			    	        }
		            	}
		    	        
		            	if (i + 1 < len) {
			    	        EmptySquare emptysquareEdge2 = emptysquares.get(i + 1);
			    	        if (OverlapTester.overlapRectangles(moon.bounds, emptysquareEdge2.bounds)) {
			    	        	emptysquareEdge2.internalEdge = true;
			    	        }
		            	}
		    	        
		        	}
		        }
            }
	        else
	        {
	        	emptysquare.internalEdge = false;
	        }
        }
    }
    
    private void playRandomPianoNote() {
    	int note = rand.nextInt(7);
    	
    	switch (note)
    	{
    		case 0:
    			listener.playNoteA();
    			break;
    		case 1:
    			listener.playNoteB();
    			break;
    		case 2:
    			listener.playNoteC();
    			break;
    		case 3:
    			listener.playNoteD();
    			break;
    		case 4:
    			listener.playNoteE();
    			break;
    		case 5:
    			listener.playNoteF();
    			break;
    		case 6:
    			listener.playNoteG();
    			break;
    	
    	}
    }
    
    private void checkBoundSquareCollisions() {
        int len = boundsquares.size();
        for (int i = 0; i < len; i++) {
            BoundSquare boundsquare = boundsquares.get(i);
            
	        if (OverlapTester.overlapRectangles(moon.bounds, boundsquare.bounds)) {
	        	
	        	if ((moon.velocity.y <= 0) && (moon.position.y > boundsquare.position.y))
	        	{   
	        		moon.boundUp();
	        		listener.bound();
		        	boundsquares.remove(boundsquare);
		        	len = boundsquares.size();
	        	}
	        	else if ((moon.velocity.y > 0) && (moon.position.y < boundsquare.position.y))
	        	{	
	            	moon.boundDown();
	            	listener.bound();
		        	boundsquares.remove(boundsquare);
		        	len = boundsquares.size();
	        	}
	        	else if ((moon.velocity.x > 0) && (moon.position.x < boundsquare.position.x))
	        	{
	            	moon.position.x = boundsquare.position.x - BoundSquare.BOUNDSQUARE_WIDTH;
	            	moon.velocity.x = 0;
	        	}
	        	else if ((moon.velocity.x < 0) && (moon.position.x > boundsquare.position.x))
	        	{
	            	moon.position.x = boundsquare.position.x + BoundSquare.BOUNDSQUARE_WIDTH;
	            	moon.velocity.x = 0;
	        	}
	        	
	        }
        }
    }
    
    private void checkTriangleCollisions() {
        int len = triangles.size();
        for (int i = 0; i < len; i++) {
            Triangle triangle = triangles.get(i);
            
            Vector2 center = new Vector2(moon.position.x, moon.position.y);
            Vector2 a = new Vector2(triangle.position.x, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
            Vector2 b = new Vector2(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
            Vector2 c = new Vector2(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
            
            if (triangle.type == Triangle.TRIANGLE_UP) {
                a.set(triangle.position.x, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
                b.set(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
                c.set(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
            }
            else if (triangle.type == Triangle.TRIANGLE_DOWN) {
                a.set(triangle.position.x, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
                b.set(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
                c.set(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
            }
            else if (triangle.type == Triangle.TRIANGLE_LEFT) {
                a.set(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y);
                b.set(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
                c.set(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
            }
            else if (triangle.type == Triangle.TRIANGLE_RIGHT) {
            	a.set(triangle.position.x + Triangle.TRIANGLE_WIDTH/2, triangle.position.y);
                b.set(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y + Triangle.TRIANGLE_HEIGHT/2);
                c.set(triangle.position.x - Triangle.TRIANGLE_WIDTH/2, triangle.position.y - Triangle.TRIANGLE_HEIGHT/2);
            }
            
            /* check collision */
            if (OverlapTester.intersectSegmentCircle(a, b, center, Moon.MOON_WIDTH/2 * Moon.MOON_WIDTH/2))
            {
            	moon.hit();
            	listener.hit();
            }
            
            if (OverlapTester.intersectSegmentCircle(a, c, center, Moon.MOON_WIDTH/2 * Moon.MOON_WIDTH/2))
            {
            	moon.hit();
            	listener.hit();
            }
        }
    }
    
    private void checkLongTriangleCollisions() {
        int len = longtriangles.size();
        for (int i = 0; i < len; i++) {
            LongTriangle longtriangle = longtriangles.get(i);
            
            Vector2 center = new Vector2(moon.position.x, moon.position.y);
            Vector2 a = new Vector2(longtriangle.position.x, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
            Vector2 b = new Vector2(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
            Vector2 c = new Vector2(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
            
            if (longtriangle.type == LongTriangle.LONGTRIANGLE_UP) {
                a.set(longtriangle.position.x, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
                b.set(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
                c.set(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
            }
            else if (longtriangle.type == LongTriangle.LONGTRIANGLE_DOWN) {
                a.set(longtriangle.position.x, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
                b.set(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
                c.set(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
            }
            else if (longtriangle.type == LongTriangle.LONGTRIANGLE_LEFT) {
                a.set(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y);
                b.set(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
                c.set(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
            }
            else if (longtriangle.type == LongTriangle.LONGTRIANGLE_RIGHT) {
            	a.set(longtriangle.position.x + LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y);
                b.set(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y + LongTriangle.LONGTRIANGLE_HEIGHT/2);
                c.set(longtriangle.position.x - LongTriangle.LONGTRIANGLE_WIDTH/2, longtriangle.position.y - LongTriangle.LONGTRIANGLE_HEIGHT/2);
            }
            
            /* check collision */
            if (OverlapTester.intersectSegmentCircle(a, b, center, Moon.MOON_WIDTH/2 * Moon.MOON_WIDTH/2))
            {
            	moon.hit();
            	listener.hit();
            }
            
            if (OverlapTester.intersectSegmentCircle(a, c, center, Moon.MOON_WIDTH/2 * Moon.MOON_WIDTH/2))
            {
            	moon.hit();
            	listener.hit();
            }
        }
    }
    
    private void checkBlackholeCollisions() {
    	Blackhole blackhole = null;
    	int len = blackholes.size();
    	int j = len;
        for (int i = 0; i < len; i++) {
            blackhole = blackholes.get(i);
        	if (OverlapTester.overlapRectangles(moon.bounds, blackhole.bounds)) {
        		j = (i + 1) % len;
        	}
        }
        
        if (j != len) {
        	blackhole = blackholes.get(j);
        	moon.position.y = blackhole.position.y;
        	if (moon.velocity.x > 0)
        		moon.position.x = blackhole.position.x + Blackhole.BLACKHOLE_WIDTH;
        	else
        		moon.position.x = blackhole.position.x - Blackhole.BLACKHOLE_WIDTH;
        }
    }
    
    private void checkOrbitCollision() {
        int len = orbits.size();
        for (int i = 0; i < len; i++) {
        	Orbit orbit = orbits.get(i);
        	if (OverlapTester.overlapRectangles(moon.bounds, orbit.bounds)) {
        		moon.position.x = orbit.position.x;
        		moon.position.y = orbit.position.y;
        		moon.orbit();
        	}
    	}
    }
    
    private void checkPhotonCollisions() {
        int len = photons.size();
        for (int i = 0; i < len; i++) {
        	Photon photon = photons.get(i);
        	if (OverlapTester.overlapRectangles(moon.bounds, photon.bounds)) {
        		moon.eat();
        		photons.remove(photon);
        		len = photons.size();
        	}
    	}
    }

    private void checkGameOver() {
    	if (moon.state == Moon.MOON_STATE_ORBIT) {
    		state = WORLD_STATE_NEXT_LEVEL;
    		level++;
        }
        
        if (moon.state == Moon.MOON_STATE_HIT) {
            state = WORLD_STATE_GAME_OVER;
        }
    }
}
